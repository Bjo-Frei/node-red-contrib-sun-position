{
    "time-calc": {
        "label": {
            "time-calc": "time-calc",
            "calc": "calc",
            "position": "Position",
            "name": "Name",
            "operand1": "Input",
            "operand1Format": "time format",
            "operand2": "Operand 2",
            "operand2Format": "time format",
            "operand2Alt": "Alternate time",
            "operand2Altoffset": "Offset",
            "operator": "operator",
            "nothing": "nothing",
            "add": "add",
            "sub": "sub",
            "equal": "== (equal)",
            "unequal": "!= (unequal)",
            "equalSec": "== (equal) - ignore ms",
            "unequalSec": "!= (unequal) - ignore ms",
            "equalMin": "== (equal) - ignore sec",
            "unequalMin": "!= (unequal) - ignore sec",
            "greater": "> (greater)",
            "greaterOrEqual": ">= (greaterOrEqual)",
            "lesser": "< (lesser)",
            "lesserOrEqual": "<= (lesserOrEqual)",
            "result1": "result",
            "result1Value": "value",
            "result1Format": "time format",
            "offset": "Offset",
            "recalcTime": "Reclac.",
            "payload": "Payload",
            "topic": "Topic",
            "seconds": "seconds",
            "minutes": "minutes",
            "hours": "hours",
            "days": "days",
            "weeks": "weeks",
            "month": "month",
            "year": "year",
            "timeformat": "time format",
            "timeformat_UNIX": "number - milliseconds UNIX timestamp",
            "timeformat_ECMA262": "string - ECMA-262",
            "timeformat_local": "string - local date and time",
            "timeformat_localLong": "string - local date and time enh.",
            "timeformat_localTime": "string - local time",
            "timeformat_localTimeLong": "string - local time enh.",
            "timeformat_localDate": "string - local date",
            "timeformat_localDateLong": "string - local date long",
            "timeformat_UTC": "string - UTC date and time",
            "timeformat_ISO": "string - ISO date and time",
            "timeformat_ms": "number - milliseconds since emit",
            "timeformat_sec": "number - seconds since emit",
            "timeformat_min": "number - minutes since emit",
            "timeformat_hour": "number - hour since emit",
            "timeformat_YYYYMMDDHHMMSS": "string - YYYYMMDDHHMMSS",
            "timeformat_YYYYMMDD_HHMMSS": "string - YYYYMMDD.HHMMSS",
            "timeformat_obj": "as object",
            "timeformat_other": "string - Other - free format",
            "timeformat_weekday": "string - day of week, e.g. Monday, 22.12.",
            "timeformat_weekday2": "string - day of week, e.g. Today, 22.12.",
            "timeparse_UNIX": "number - milliseconds UNIX timestamp",
            "timeparse_ECMA262": "string - ECMA-262",
            "timeparse_TextOther": "string - various",
            "timeparse_YYYYMMDDHHMMSS": "string - YYYYMMDDHHMMSS",
            "timeparse_YYYYMMDD_HHMMSS": "string - YYYYMMDD.HHMMSS",
            "timeparse_ms": "number - milliseconds since emit",
            "timeparse_sec": "number - seconds since emit",
            "timeparse_min": "number - minutes since emit",
            "timeparse_hour": "number - hour since emit",
            "timeparse_other": "string - Other - free format",
            "on": "on",
            "none": "none",
            "stopped": "stopped",
            "timestamp": "timestamp",
            "binary": "binary",
            "json": "json",
            "jsonata": "json expr.",
            "blank": "\"\"",
            "5minutes": "every 5 minutes",
            "10minutes": "every 10 minutes",
            "15minutes": "every 15 minutes",
            "30minutes": "every 30 minutes",
            "1hour": "every hour",
            "2hours": "every 2 hour",
            "4hours": "every 4 hour",
            "6hours": "every 6 hour",
            "12hours": "every 12 hour",
            "24hours": "every 24 hour",
            "once": "additional",
            "onstart": "Inject on start ",
            "onceDelay": "seconds",
            "success": "Successfully injected: __label__"
        },
        "days": [
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
            "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
        ],
        "month": [
            "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        ],
        "dayDiffNames": [
            "Yesterday", "Today", "Tomorrow", "day after tomorrow"
        ],
        "placeholder": {
            "position": "Position",
            "name": "Name",
            "topic": "Name",
            "property": "Property",
            "payloadStart": "",
            "payloadEnd": "",
            "startTime": "7:40",
            "startOffset": "0",
            "time": "18:15",
            "offset": "0",
            "timeAlt": "18:15",
            "timeAltOffset": "0"
        },
        "tips": {
            "config": "If time is set to 'not used' the inject node can only used manually or once!",
            "addTimes": "Here can be defined alternate time. If the given property is true the alternate time will be used instead the normal time. This can be used to have different time for holidays or other special days.",
            "recalc": "If the timestamp is given through a flow or global context, changes to these contexts only lead to a change of the planned emit time if a recalculation is done.",
            "addPayload": "With the additional message properties you can send the message with define up to 3 additional properties with enhanced settings. Especial there can be defined timestamps in relation to the message send timestamp."
        },
        "errors": {
            "error": "<strong>Error</strong>: __message__",
            "error-text": "Exception occured on time-calc",
            "error-title": "internal error",
            "unexpected": "unexpected error (__status__) __message__",
            "invalid-property-type": "Invalid Property Type: __type__",
            "invalid-json": "Invalid 'to' JSON property",
            "invalid-jsonata-expr": "Invalid JSONata expression: __error__",
            "not-deployed": "node not deployed",
            "no-response": "no response from server",
            "failed": "inject failed, see log for details",
            "failed2": "Inject failed: __error__",
            "toolong": "Interval too large"
        }
    }
}